/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct SearchApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl SearchApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> SearchApiClient {
        SearchApiClient {
            configuration: configuration,
        }
    }
}

pub trait SearchApi {
    fn get_search_collection_paginated(&self, query: &str, language: &str, page: i32) -> Result<::models::SearchCollectionResultsPaginated, Error>;
    fn get_search_company_paginated(&self, query: &str, page: i32) -> Result<::models::SearchCompanyResultsPaginated, Error>;
    fn get_search_keyword_paginated(&self, query: &str, page: i32) -> Result<::models::SearchKeywordResultsPaginated, Error>;
    fn get_search_movie_paginated(&self, query: &str, year: i32, primary_release_year: i32, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::MoviePaginated, Error>;
    fn get_search_multi_paginated(&self, query: &str, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::SearchMultiResultsPaginated, Error>;
    fn get_search_person_paginated(&self, query: &str, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::SearchPersonResultsPaginated, Error>;
    fn get_search_tv_paginated(&self, query: &str, first_air_date_year: i32, language: &str, page: i32) -> Result<::models::TvPaginated, Error>;
}

impl SearchApi for SearchApiClient {
    fn get_search_collection_paginated(&self, query: &str, language: &str, page: i32) -> Result<::models::SearchCollectionResultsPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/collection", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_company_paginated(&self, query: &str, page: i32) -> Result<::models::SearchCompanyResultsPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/company", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_keyword_paginated(&self, query: &str, page: i32) -> Result<::models::SearchKeywordResultsPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/keyword", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_movie_paginated(&self, query: &str, year: i32, primary_release_year: i32, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::MoviePaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/movie", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("year", &year.to_string())]);
        req_builder = req_builder.query(&[("primary_release_year", &primary_release_year.to_string())]);
        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("include_adult", &include_adult.to_string())]);
        req_builder = req_builder.query(&[("region", &region.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_multi_paginated(&self, query: &str, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::SearchMultiResultsPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/multi", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("include_adult", &include_adult.to_string())]);
        req_builder = req_builder.query(&[("region", &region.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_person_paginated(&self, query: &str, language: &str, page: i32, include_adult: bool, region: &str) -> Result<::models::SearchPersonResultsPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/person", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("include_adult", &include_adult.to_string())]);
        req_builder = req_builder.query(&[("region", &region.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_search_tv_paginated(&self, query: &str, first_air_date_year: i32, language: &str, page: i32) -> Result<::models::TvPaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/tv", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("first_air_date_year", &first_air_date_year.to_string())]);
        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("query", &query.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
