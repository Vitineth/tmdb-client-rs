/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration, urlencode};

pub struct KeywordsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl KeywordsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> KeywordsApiClient {
        KeywordsApiClient {
            configuration: configuration,
        }
    }
}

pub trait KeywordsApi {
    fn get_keyword_details(&self, keyword_id: i32) -> Result<::models::Keyword, Error>;
    fn get_movies_by_keyword_paginated(&self, keyword_id: i32, language: &str, include_adult: bool) -> Result<::models::MoviePaginated, Error>;
}

impl KeywordsApi for KeywordsApiClient {
    fn get_keyword_details(&self, keyword_id: i32) -> Result<::models::Keyword, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/keyword/{keyword_id}", configuration.base_path, keyword_id=keyword_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_movies_by_keyword_paginated(&self, keyword_id: i32, language: &str, include_adult: bool) -> Result<::models::MoviePaginated, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/keyword/{keyword_id}/movies", configuration.base_path, keyword_id=keyword_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("include_adult", &include_adult.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
