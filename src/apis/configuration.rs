/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::{Mutex, MutexGuard};
use std::thread;
use std::time::{Duration, Instant};

use reqwest;
use reqwest::IntoUrl;

/// TMDB rate limit is 40 reqs every 10s. In a naive approah, we convert this limit into one req every 250ms.
const TMDB_DELAY_BETWEEN_CALLS_IN_MS: u64 = 250;

pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: Mutex<RateLimitReqwestClient>,
    pub api_key: Option<String>,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }

    pub fn new_with_api_key<T: Into<String>>(api_key: T) -> Self {
        let mut result = Configuration::default();
        result.api_key = Some(api_key.into());
        result
    }

    /// Ignore poisoned lock by previous error: last_call is updated before Reqwest invocation, so RateLimitClient
    /// still works as intended after a Reqwest exception.
    pub fn rate_limit_client(&self) -> MutexGuard<RateLimitReqwestClient> {
        let client = match self.client.lock() {
            Ok(g) => g,
            Err(p) => p.into_inner()
        };
        client
    }

}

impl Default for Configuration {
    fn default() -> Self {
        let min_delay_between_calls = std::time::Duration::from_millis(TMDB_DELAY_BETWEEN_CALLS_IN_MS);

        Configuration {
            base_path: "https://api.themoviedb.org/3".to_owned(),
            user_agent: Some("OpenAPI-Generator/3/rust".to_owned()),
            client: Mutex::new(RateLimitReqwestClient::new(reqwest::Client::new(), min_delay_between_calls)),
            api_key: None,
        }
    }
}

pub struct RateLimitReqwestClient {
    pub client: reqwest::Client,
    pub min_delay_between_calls: Option<Duration>,
    pub last_call: Instant,
}

impl RateLimitReqwestClient {

    pub fn new<T: Into<Option<Duration>>>(client: reqwest::Client, min_delay_between_calls: T) -> RateLimitReqwestClient {
        RateLimitReqwestClient {
            client,
            min_delay_between_calls: min_delay_between_calls.into(),
            last_call: Instant::now()
        }
    }

    pub fn get<T: IntoUrl>(&self, url: T) -> reqwest::RequestBuilder {
        self.client.get(url)
    }

    pub fn post<T: IntoUrl>(&self, url: T) -> reqwest::RequestBuilder {
        self.client.post(url)
    }

    pub fn put<T: IntoUrl>(&self, url: T) -> reqwest::RequestBuilder {
        self.client.put(url)
    }

    pub fn delete<T: IntoUrl>(&self, url: T) -> reqwest::RequestBuilder {
        self.client.delete(url)
    }

    pub fn execute(&mut self, req: reqwest::Request) -> reqwest::Result<reqwest::Response> {

        if let Some(limit) = self.min_delay_between_calls {
            if self.last_call.elapsed() < limit {
                thread::sleep(limit)
            }
        }

        self.last_call = Instant::now();
        self.client.execute(req)
    }
}
