/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration, urlencode};

pub struct DefaultApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DefaultApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DefaultApiClient {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn d_elete_authentication_session(&self, body: ::models::InlineObject11) -> Result<::models::InlineResponse20085, Error>;
    fn d_elete_list_list_id(&self, list_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error>;
    fn d_elete_movie_movie_id_rating(&self, movie_id: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error>;
    fn d_elete_tv_tv_id_rating(&self, tv_id: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error>;
    fn d_elete_tv_tv_id_season_season_number_episode_episode_number_rating(&self, tv_id: i32, season_number: i32, episode_number: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error>;
    fn g_et_account(&self, session_id: &str) -> Result<::models::InlineResponse20069, Error>;
    fn g_et_account_account_id_favorite_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_account_account_id_favorite_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse200, Error>;
    fn g_et_account_account_id_lists(&self, account_id: i32, session_id: &str, api_key: &str) -> Result<::models::InlineResponse20041, Error>;
    fn g_et_account_account_id_rated_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse2008, Error>;
    fn g_et_account_account_id_rated_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse2006, Error>;
    fn g_et_account_account_id_rated_tv_episodes(&self, account_id: &str, session_id: &str) -> Result<::models::InlineResponse20031, Error>;
    fn g_et_account_account_id_watchlist_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_account_account_id_watchlist_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse200, Error>;
    fn g_et_authentication_guest_session_new(&self, ) -> Result<::models::InlineResponse20082, Error>;
    fn g_et_authentication_token_new(&self, ) -> Result<::models::InlineResponse20084, Error>;
    fn g_et_certification_movie_list(&self, ) -> Result<::models::InlineResponse20080, Error>;
    fn g_et_certification_tv_list(&self, ) -> Result<::models::InlineResponse20053, Error>;
    fn g_et_collection_collection_id(&self, collection_id: i32) -> Result<::models::InlineResponse20049, Error>;
    fn g_et_collection_collection_id_images(&self, collection_id: i32) -> Result<::models::InlineResponse20087, Error>;
    fn g_et_collection_collection_id_translations(&self, collection_id: i32) -> Result<::models::InlineResponse20019, Error>;
    fn g_et_company_company_id(&self, company_id: i32) -> Result<::models::InlineResponse20050, Error>;
    fn g_et_company_company_id_alternative_names(&self, company_id: i32) -> Result<::models::InlineResponse20038, Error>;
    fn g_et_company_company_id_images(&self, company_id: i32) -> Result<::models::InlineResponse20058, Error>;
    fn g_et_configuration(&self, api_key: &str) -> Result<::models::InlineResponse20059, Error>;
    fn g_et_configuration_countries(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20072>, Error>;
    fn g_et_configuration_jobs(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20056>, Error>;
    fn g_et_configuration_languages(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20018>, Error>;
    fn g_et_configuration_primary_translations(&self, api_key: &str) -> Result<Vec<String>, Error>;
    fn g_et_configuration_timezones(&self, api_key: &str) -> Result<Vec<::models::InlineResponse2001>, Error>;
    fn g_et_credit_credit_id(&self, credit_id: &str) -> Result<::models::InlineResponse20026, Error>;
    fn g_et_discover_movie(&self, sort_by: &str, certification_country: &str, certification: &str, certification_lte: &str, include_adult: bool, include_video: bool, language: &str, page: i32, primary_release_year: i32, primary_release_date_gte: String, primary_release_date_lte: String, release_date_gte: String, release_date_lte: String, vote_count_gte: i32, vote_count_lte: i32, vote_average_gte: f32, vote_average_lte: f32, with_cast: &str, with_crew: &str, with_companies: &str, with_genres: &str, with_keywords: &str, with_people: &str, year: i32, without_genres: &str, with_runtime_gte: i32, with_runtime_lte: i32, with_release_type: i32, with_original_language: &str, without_keywords: &str) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_discover_tv(&self, sort_by: &str, air_date_gte: String, air_date_lte: String, first_air_date_gte: String, first_air_date_lte: String, first_air_date_year: i32, language: &str, page: i32, timezone: &str, vote_average_gte: f32, vote_count_gte: i32, with_genres: &str, with_networks: &str, without_genres: &str, with_runtime_gte: i32, with_runtime_lte: i32, include_null_first_air_dates: bool, with_original_language: &str, without_keywords: &str, screened_theatrically: bool, with_companies: &str) -> Result<::models::InlineResponse200, Error>;
    fn g_et_find_external_id(&self, external_id: &str, external_source: &str) -> Result<::models::InlineResponse20045, Error>;
    fn g_et_genre_movie_list(&self, language: &str) -> Result<::models::InlineResponse20024, Error>;
    fn g_et_genre_tv_list(&self, ) -> Result<::models::InlineResponse20024, Error>;
    fn g_et_guest_session_guest_session_id_rated_movies(&self, guest_session_id: &str) -> Result<::models::InlineResponse2008, Error>;
    fn g_et_guest_session_guest_session_id_rated_tv(&self, guest_session_id: &str) -> Result<::models::InlineResponse2006, Error>;
    fn g_et_guest_session_guest_session_id_rated_tv_episodes(&self, guest_session_id: &str) -> Result<::models::InlineResponse20010, Error>;
    fn g_et_keyword_keyword_id(&self, keyword_id: i32) -> Result<::models::InlineResponse20024Genres, Error>;
    fn g_et_keyword_keyword_id_movies(&self, keyword_id: i32) -> Result<::models::InlineResponse20063, Error>;
    fn g_et_list_list_id(&self, list_id: &str) -> Result<::models::InlineResponse2002, Error>;
    fn g_et_list_list_id_item_status(&self, list_id: &str, movie_id: i32) -> Result<::models::InlineResponse20028, Error>;
    fn g_et_movie_changes(&self, ) -> Result<::models::InlineResponse20016, Error>;
    fn g_et_movie_latest(&self, ) -> Result<::models::InlineResponse20051, Error>;
    fn g_et_movie_movie_id(&self, movie_id: i32) -> Result<::models::InlineResponse20044, Error>;
    fn g_et_movie_movie_id_account_states(&self, movie_id: i32, session_id: &str, guest_session_id: &str) -> Result<::models::InlineResponse2004, Error>;
    fn g_et_movie_movie_id_alternative_titles(&self, movie_id: i32, country: &str) -> Result<::models::InlineResponse20062, Error>;
    fn g_et_movie_movie_id_changes(&self, movie_id: i32) -> Result<::models::InlineResponse20052, Error>;
    fn g_et_movie_movie_id_credits(&self, movie_id: i32) -> Result<::models::InlineResponse20066, Error>;
    fn g_et_movie_movie_id_external_ids(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse2009, Error>;
    fn g_et_movie_movie_id_images(&self, movie_id: i32, include_image_language: &str) -> Result<::models::InlineResponse20022, Error>;
    fn g_et_movie_movie_id_keywords(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20029, Error>;
    fn g_et_movie_movie_id_lists(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20079, Error>;
    fn g_et_movie_movie_id_recommendations(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_movie_movie_id_release_dates(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20043, Error>;
    fn g_et_movie_movie_id_reviews(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20033, Error>;
    fn g_et_movie_movie_id_similar(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_movie_movie_id_translations(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20019, Error>;
    fn g_et_movie_movie_id_videos(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20015, Error>;
    fn g_et_movie_now_playing(&self, ) -> Result<::models::InlineResponse20032, Error>;
    fn g_et_movie_popular(&self, ) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_movie_top_rated(&self, ) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_movie_upcoming(&self, ) -> Result<::models::InlineResponse20071, Error>;
    fn g_et_network_network_id(&self, network_id: i32) -> Result<::models::InlineResponse20064, Error>;
    fn g_et_network_network_id_alternative_names(&self, network_id: i32) -> Result<::models::InlineResponse20038, Error>;
    fn g_et_network_network_id_images(&self, network_id: i32) -> Result<::models::InlineResponse20058, Error>;
    fn g_et_person_changes(&self, ) -> Result<::models::InlineResponse20016, Error>;
    fn g_et_person_latest(&self, ) -> Result<::models::InlineResponse20025, Error>;
    fn g_et_person_person_id(&self, person_id: i32) -> Result<::models::InlineResponse20073, Error>;
    fn g_et_person_person_id_changes(&self, person_id: i32) -> Result<::models::InlineResponse20075, Error>;
    fn g_et_person_person_id_combined_credits(&self, person_id: i32) -> Result<::models::InlineResponse20014, Error>;
    fn g_et_person_person_id_external_ids(&self, person_id: i32) -> Result<::models::InlineResponse20012, Error>;
    fn g_et_person_person_id_images(&self, person_id: i32) -> Result<::models::InlineResponse20034, Error>;
    fn g_et_person_person_id_movie_credits(&self, person_id: i32) -> Result<::models::InlineResponse2005, Error>;
    fn g_et_person_person_id_tagged_images(&self, person_id: i32) -> Result<::models::InlineResponse20054, Error>;
    fn g_et_person_person_id_translations(&self, person_id: i32) -> Result<::models::InlineResponse20036, Error>;
    fn g_et_person_person_id_tv_credits(&self, person_id: i32) -> Result<::models::InlineResponse20076, Error>;
    fn g_et_person_popular(&self, ) -> Result<::models::InlineResponse20048, Error>;
    fn g_et_review_review_id(&self, review_id: &str) -> Result<::models::InlineResponse20017, Error>;
    fn g_et_search_collection(&self, ) -> Result<::models::InlineResponse20047, Error>;
    fn g_et_search_company(&self, ) -> Result<::models::InlineResponse20067, Error>;
    fn g_et_search_keyword(&self, ) -> Result<::models::InlineResponse20067, Error>;
    fn g_et_search_movie(&self, year: i32, primary_release_year: i32) -> Result<::models::InlineResponse20013, Error>;
    fn g_et_search_multi(&self, ) -> Result<::models::InlineResponse20081, Error>;
    fn g_et_search_person(&self, ) -> Result<::models::InlineResponse2003, Error>;
    fn g_et_search_tv(&self, first_air_date_year: i32) -> Result<::models::InlineResponse200, Error>;
    fn g_et_trending_media_type_time_window(&self, media_type: &str, time_window: &str) -> Result<::models::InlineResponse20021, Error>;
    fn g_et_tv_airing_today(&self, ) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_changes(&self, ) -> Result<::models::InlineResponse20016, Error>;
    fn g_et_tv_episode_episode_id_changes(&self, episode_id: i32) -> Result<::models::InlineResponse20060, Error>;
    fn g_et_tv_episode_group_id(&self, id: &str) -> Result<::models::InlineResponse20035, Error>;
    fn g_et_tv_latest(&self, ) -> Result<::models::InlineResponse20077, Error>;
    fn g_et_tv_on_the_air(&self, ) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_popular(&self, ) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_season_season_id_changes(&self, season_id: i32) -> Result<::models::InlineResponse20030, Error>;
    fn g_et_tv_top_rated(&self, ) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_tv_id(&self, tv_id: i32) -> Result<::models::InlineResponse20037, Error>;
    fn g_et_tv_tv_id_account_states(&self, tv_id: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse2004, Error>;
    fn g_et_tv_tv_id_alternative_titles(&self, tv_id: i32) -> Result<::models::InlineResponse20070, Error>;
    fn g_et_tv_tv_id_changes(&self, tv_id: i32) -> Result<::models::InlineResponse20086, Error>;
    fn g_et_tv_tv_id_content_ratings(&self, tv_id: i32) -> Result<::models::InlineResponse20074, Error>;
    fn g_et_tv_tv_id_credits(&self, tv_id: i32) -> Result<::models::InlineResponse20011, Error>;
    fn g_et_tv_tv_id_episode_groups(&self, tv_id: i32) -> Result<::models::InlineResponse20040, Error>;
    fn g_et_tv_tv_id_external_ids(&self, tv_id: i32) -> Result<::models::InlineResponse2009, Error>;
    fn g_et_tv_tv_id_images(&self, tv_id: i32) -> Result<::models::InlineResponse20039, Error>;
    fn g_et_tv_tv_id_keywords(&self, tv_id: i32) -> Result<::models::InlineResponse20046, Error>;
    fn g_et_tv_tv_id_recommendations(&self, tv_id: i32) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_tv_id_reviews(&self, tv_id: i32) -> Result<::models::InlineResponse20033, Error>;
    fn g_et_tv_tv_id_screened_theatrically(&self, tv_id: i32) -> Result<::models::InlineResponse2007, Error>;
    fn g_et_tv_tv_id_season_season_number(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20083, Error>;
    fn g_et_tv_tv_id_season_season_number_account_states(&self, tv_id: i32, season_number: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse20042, Error>;
    fn g_et_tv_tv_id_season_season_number_credits(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20011, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20057, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_account_states(&self, tv_id: i32, season_number: i32, episode_number: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse2009, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_credits(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20020, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_external_ids(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse2009, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_images(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20065, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_translations(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20068, Error>;
    fn g_et_tv_tv_id_season_season_number_episode_episode_number_videos(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20061, Error>;
    fn g_et_tv_tv_id_season_season_number_external_ids(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse2009, Error>;
    fn g_et_tv_tv_id_season_season_number_images(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20023, Error>;
    fn g_et_tv_tv_id_season_season_number_videos(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20061, Error>;
    fn g_et_tv_tv_id_similar(&self, tv_id: i32) -> Result<::models::InlineResponse200, Error>;
    fn g_et_tv_tv_id_translations(&self, tv_id: i32) -> Result<::models::InlineResponse20078, Error>;
    fn g_et_tv_tv_id_videos(&self, tv_id: i32) -> Result<::models::InlineResponse20027, Error>;
    fn p_ost_account_account_id_favorite(&self, account_id: i32, session_id: &str, content_type: &str, body: ::models::InlineObject2) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_account_account_id_watchlist(&self, account_id: i32, content_type: &str, session_id: &str, body: ::models::InlineObject8) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_authentication_session_convert4(&self, body: ::models::InlineObject4) -> Result<::models::InlineResponse20055, Error>;
    fn p_ost_authentication_session_new(&self, body: ::models::InlineObject6) -> Result<::models::InlineResponse20055, Error>;
    fn p_ost_authentication_token_validate_with_login(&self, body: ::models::InlineObject10) -> Result<::models::InlineResponse20084, Error>;
    fn p_ost_list(&self, content_type: &str, session_id: &str, body: ::models::InlineObject5) -> Result<::models::InlineResponse201, Error>;
    fn p_ost_list_list_id_add_item(&self, list_id: &str, content_type: &str, session_id: &str, body: ::models::InlineObject9) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_list_list_id_clear(&self, list_id: &str, confirm: bool, session_id: &str) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_list_list_id_remove_item(&self, list_id: &str, content_type: &str, session_id: &str, body: ::models::InlineObject7) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_movie_movie_id_rating(&self, movie_id: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_tv_tv_id_rating(&self, tv_id: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject3) -> Result<::models::InlineResponse401, Error>;
    fn p_ost_tv_tv_id_season_season_number_episode_episode_number_rating(&self, tv_id: i32, season_number: i32, episode_number: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject1) -> Result<::models::InlineResponse401, Error>;
}

impl DefaultApi for DefaultApiClient {
    fn d_elete_authentication_session(&self, body: ::models::InlineObject11) -> Result<::models::InlineResponse20085, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/session", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn d_elete_list_list_id(&self, list_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn d_elete_movie_movie_id_rating(&self, movie_id: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/rating", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn d_elete_tv_tv_id_rating(&self, tv_id: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/rating", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn d_elete_tv_tv_id_season_season_number_episode_episode_number_rating(&self, tv_id: i32, season_number: i32, episode_number: i32, content_type: &str, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/rating", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account(&self, session_id: &str) -> Result<::models::InlineResponse20069, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_favorite_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/favorite/movies", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_favorite_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/favorite/tv", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_lists(&self, account_id: i32, session_id: &str, api_key: &str) -> Result<::models::InlineResponse20041, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/lists", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_rated_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse2008, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/rated/movies", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_rated_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse2006, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/rated/tv", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_rated_tv_episodes(&self, account_id: &str, session_id: &str) -> Result<::models::InlineResponse20031, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/rated/tv/episodes", configuration.base_path, account_id=urlencode(account_id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_watchlist_movies(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/watchlist/movies", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_account_account_id_watchlist_tv(&self, account_id: i32, session_id: &str) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/watchlist/tv", configuration.base_path, account_id=account_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_authentication_guest_session_new(&self, ) -> Result<::models::InlineResponse20082, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/guest_session/new", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_authentication_token_new(&self, ) -> Result<::models::InlineResponse20084, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/token/new", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_certification_movie_list(&self, ) -> Result<::models::InlineResponse20080, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/certification/movie/list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_certification_tv_list(&self, ) -> Result<::models::InlineResponse20053, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/certification/tv/list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_collection_collection_id(&self, collection_id: i32) -> Result<::models::InlineResponse20049, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/collection/{collection_id}", configuration.base_path, collection_id=collection_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_collection_collection_id_images(&self, collection_id: i32) -> Result<::models::InlineResponse20087, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/collection/{collection_id}/images", configuration.base_path, collection_id=collection_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_collection_collection_id_translations(&self, collection_id: i32) -> Result<::models::InlineResponse20019, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/collection/{collection_id}/translations", configuration.base_path, collection_id=collection_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_company_company_id(&self, company_id: i32) -> Result<::models::InlineResponse20050, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/company/{company_id}", configuration.base_path, company_id=company_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_company_company_id_alternative_names(&self, company_id: i32) -> Result<::models::InlineResponse20038, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/company/{company_id}/alternative_names", configuration.base_path, company_id=company_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_company_company_id_images(&self, company_id: i32) -> Result<::models::InlineResponse20058, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/company/{company_id}/images", configuration.base_path, company_id=company_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration(&self, api_key: &str) -> Result<::models::InlineResponse20059, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration_countries(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20072>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration/countries", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration_jobs(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20056>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration/jobs", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration_languages(&self, api_key: &str) -> Result<Vec<::models::InlineResponse20018>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration/languages", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration_primary_translations(&self, api_key: &str) -> Result<Vec<String>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration/primary_translations", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_configuration_timezones(&self, api_key: &str) -> Result<Vec<::models::InlineResponse2001>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/configuration/timezones", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_credit_credit_id(&self, credit_id: &str) -> Result<::models::InlineResponse20026, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/credit/{credit_id}", configuration.base_path, credit_id=urlencode(credit_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_discover_movie(&self, sort_by: &str, certification_country: &str, certification: &str, certification_lte: &str, include_adult: bool, include_video: bool, language: &str, page: i32, primary_release_year: i32, primary_release_date_gte: String, primary_release_date_lte: String, release_date_gte: String, release_date_lte: String, vote_count_gte: i32, vote_count_lte: i32, vote_average_gte: f32, vote_average_lte: f32, with_cast: &str, with_crew: &str, with_companies: &str, with_genres: &str, with_keywords: &str, with_people: &str, year: i32, without_genres: &str, with_runtime_gte: i32, with_runtime_lte: i32, with_release_type: i32, with_original_language: &str, without_keywords: &str) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/discover/movie", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("sort_by", &sort_by.to_string())]);
        req_builder = req_builder.query(&[("certification_country", &certification_country.to_string())]);
        req_builder = req_builder.query(&[("certification", &certification.to_string())]);
        req_builder = req_builder.query(&[("certification.lte", &certification_lte.to_string())]);
        req_builder = req_builder.query(&[("include_adult", &include_adult.to_string())]);
        req_builder = req_builder.query(&[("include_video", &include_video.to_string())]);
        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("primary_release_year", &primary_release_year.to_string())]);
        req_builder = req_builder.query(&[("primary_release_date.gte", &primary_release_date_gte.to_string())]);
        req_builder = req_builder.query(&[("primary_release_date.lte", &primary_release_date_lte.to_string())]);
        req_builder = req_builder.query(&[("release_date.gte", &release_date_gte.to_string())]);
        req_builder = req_builder.query(&[("release_date.lte", &release_date_lte.to_string())]);
        req_builder = req_builder.query(&[("vote_count.gte", &vote_count_gte.to_string())]);
        req_builder = req_builder.query(&[("vote_count.lte", &vote_count_lte.to_string())]);
        req_builder = req_builder.query(&[("vote_average.gte", &vote_average_gte.to_string())]);
        req_builder = req_builder.query(&[("vote_average.lte", &vote_average_lte.to_string())]);
        req_builder = req_builder.query(&[("with_cast", &with_cast.to_string())]);
        req_builder = req_builder.query(&[("with_crew", &with_crew.to_string())]);
        req_builder = req_builder.query(&[("with_companies", &with_companies.to_string())]);
        req_builder = req_builder.query(&[("with_genres", &with_genres.to_string())]);
        req_builder = req_builder.query(&[("with_keywords", &with_keywords.to_string())]);
        req_builder = req_builder.query(&[("with_people", &with_people.to_string())]);
        req_builder = req_builder.query(&[("year", &year.to_string())]);
        req_builder = req_builder.query(&[("without_genres", &without_genres.to_string())]);
        req_builder = req_builder.query(&[("with_runtime.gte", &with_runtime_gte.to_string())]);
        req_builder = req_builder.query(&[("with_runtime.lte", &with_runtime_lte.to_string())]);
        req_builder = req_builder.query(&[("with_release_type", &with_release_type.to_string())]);
        req_builder = req_builder.query(&[("with_original_language", &with_original_language.to_string())]);
        req_builder = req_builder.query(&[("without_keywords", &without_keywords.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_discover_tv(&self, sort_by: &str, air_date_gte: String, air_date_lte: String, first_air_date_gte: String, first_air_date_lte: String, first_air_date_year: i32, language: &str, page: i32, timezone: &str, vote_average_gte: f32, vote_count_gte: i32, with_genres: &str, with_networks: &str, without_genres: &str, with_runtime_gte: i32, with_runtime_lte: i32, include_null_first_air_dates: bool, with_original_language: &str, without_keywords: &str, screened_theatrically: bool, with_companies: &str) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/discover/tv", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("sort_by", &sort_by.to_string())]);
        req_builder = req_builder.query(&[("air_date.gte", &air_date_gte.to_string())]);
        req_builder = req_builder.query(&[("air_date.lte", &air_date_lte.to_string())]);
        req_builder = req_builder.query(&[("first_air_date.gte", &first_air_date_gte.to_string())]);
        req_builder = req_builder.query(&[("first_air_date.lte", &first_air_date_lte.to_string())]);
        req_builder = req_builder.query(&[("first_air_date_year", &first_air_date_year.to_string())]);
        req_builder = req_builder.query(&[("language", &language.to_string())]);
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("timezone", &timezone.to_string())]);
        req_builder = req_builder.query(&[("vote_average.gte", &vote_average_gte.to_string())]);
        req_builder = req_builder.query(&[("vote_count.gte", &vote_count_gte.to_string())]);
        req_builder = req_builder.query(&[("with_genres", &with_genres.to_string())]);
        req_builder = req_builder.query(&[("with_networks", &with_networks.to_string())]);
        req_builder = req_builder.query(&[("without_genres", &without_genres.to_string())]);
        req_builder = req_builder.query(&[("with_runtime.gte", &with_runtime_gte.to_string())]);
        req_builder = req_builder.query(&[("with_runtime.lte", &with_runtime_lte.to_string())]);
        req_builder = req_builder.query(&[("include_null_first_air_dates", &include_null_first_air_dates.to_string())]);
        req_builder = req_builder.query(&[("with_original_language", &with_original_language.to_string())]);
        req_builder = req_builder.query(&[("without_keywords", &without_keywords.to_string())]);
        req_builder = req_builder.query(&[("screened_theatrically", &screened_theatrically.to_string())]);
        req_builder = req_builder.query(&[("with_companies", &with_companies.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_find_external_id(&self, external_id: &str, external_source: &str) -> Result<::models::InlineResponse20045, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/find/{external_id}", configuration.base_path, external_id=urlencode(external_id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("external_source", &external_source.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_genre_movie_list(&self, language: &str) -> Result<::models::InlineResponse20024, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/genre/movie/list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("language", &language.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_genre_tv_list(&self, ) -> Result<::models::InlineResponse20024, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/genre/tv/list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_guest_session_guest_session_id_rated_movies(&self, guest_session_id: &str) -> Result<::models::InlineResponse2008, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/guest_session/{guest_session_id}/rated/movies", configuration.base_path, guest_session_id=urlencode(guest_session_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_guest_session_guest_session_id_rated_tv(&self, guest_session_id: &str) -> Result<::models::InlineResponse2006, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/guest_session/{guest_session_id}/rated/tv", configuration.base_path, guest_session_id=urlencode(guest_session_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_guest_session_guest_session_id_rated_tv_episodes(&self, guest_session_id: &str) -> Result<::models::InlineResponse20010, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/guest_session/{guest_session_id}/rated/tv/episodes", configuration.base_path, guest_session_id=urlencode(guest_session_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_keyword_keyword_id(&self, keyword_id: i32) -> Result<::models::InlineResponse20024Genres, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/keyword/{keyword_id}", configuration.base_path, keyword_id=keyword_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_keyword_keyword_id_movies(&self, keyword_id: i32) -> Result<::models::InlineResponse20063, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/keyword/{keyword_id}/movies", configuration.base_path, keyword_id=keyword_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_list_list_id(&self, list_id: &str) -> Result<::models::InlineResponse2002, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_list_list_id_item_status(&self, list_id: &str, movie_id: i32) -> Result<::models::InlineResponse20028, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}/item_status", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("movie_id", &movie_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_changes(&self, ) -> Result<::models::InlineResponse20016, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/changes", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_latest(&self, ) -> Result<::models::InlineResponse20051, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/latest", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id(&self, movie_id: i32) -> Result<::models::InlineResponse20044, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_account_states(&self, movie_id: i32, session_id: &str, guest_session_id: &str) -> Result<::models::InlineResponse2004, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/account_states", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_alternative_titles(&self, movie_id: i32, country: &str) -> Result<::models::InlineResponse20062, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/alternative_titles", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("country", &country.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_changes(&self, movie_id: i32) -> Result<::models::InlineResponse20052, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/changes", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_credits(&self, movie_id: i32) -> Result<::models::InlineResponse20066, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/credits", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_external_ids(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/external_ids", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_images(&self, movie_id: i32, include_image_language: &str) -> Result<::models::InlineResponse20022, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/images", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("include_image_language", &include_image_language.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_keywords(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20029, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/keywords", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_lists(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20079, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/lists", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_recommendations(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/recommendations", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_release_dates(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20043, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/release_dates", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_reviews(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20033, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/reviews", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_similar(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/similar", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_translations(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20019, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/translations", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_movie_id_videos(&self, movie_id: i32, api_key: &str) -> Result<::models::InlineResponse20015, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/videos", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("api_key", &api_key.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_now_playing(&self, ) -> Result<::models::InlineResponse20032, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/now_playing", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_popular(&self, ) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/popular", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_top_rated(&self, ) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/top_rated", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_movie_upcoming(&self, ) -> Result<::models::InlineResponse20071, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/upcoming", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_network_network_id(&self, network_id: i32) -> Result<::models::InlineResponse20064, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/network/{network_id}", configuration.base_path, network_id=network_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_network_network_id_alternative_names(&self, network_id: i32) -> Result<::models::InlineResponse20038, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/network/{network_id}/alternative_names", configuration.base_path, network_id=network_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_network_network_id_images(&self, network_id: i32) -> Result<::models::InlineResponse20058, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/network/{network_id}/images", configuration.base_path, network_id=network_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_changes(&self, ) -> Result<::models::InlineResponse20016, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/changes", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_latest(&self, ) -> Result<::models::InlineResponse20025, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/latest", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id(&self, person_id: i32) -> Result<::models::InlineResponse20073, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_changes(&self, person_id: i32) -> Result<::models::InlineResponse20075, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/changes", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_combined_credits(&self, person_id: i32) -> Result<::models::InlineResponse20014, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/combined_credits", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_external_ids(&self, person_id: i32) -> Result<::models::InlineResponse20012, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/external_ids", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_images(&self, person_id: i32) -> Result<::models::InlineResponse20034, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/images", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_movie_credits(&self, person_id: i32) -> Result<::models::InlineResponse2005, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/movie_credits", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_tagged_images(&self, person_id: i32) -> Result<::models::InlineResponse20054, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/tagged_images", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_translations(&self, person_id: i32) -> Result<::models::InlineResponse20036, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/translations", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_person_id_tv_credits(&self, person_id: i32) -> Result<::models::InlineResponse20076, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/{person_id}/tv_credits", configuration.base_path, person_id=person_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_person_popular(&self, ) -> Result<::models::InlineResponse20048, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/person/popular", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_review_review_id(&self, review_id: &str) -> Result<::models::InlineResponse20017, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/review/{review_id}", configuration.base_path, review_id=urlencode(review_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_collection(&self, ) -> Result<::models::InlineResponse20047, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/collection", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_company(&self, ) -> Result<::models::InlineResponse20067, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/company", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_keyword(&self, ) -> Result<::models::InlineResponse20067, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/keyword", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_movie(&self, year: i32, primary_release_year: i32) -> Result<::models::InlineResponse20013, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/movie", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("year", &year.to_string())]);
        req_builder = req_builder.query(&[("primary_release_year", &primary_release_year.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_multi(&self, ) -> Result<::models::InlineResponse20081, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/multi", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_person(&self, ) -> Result<::models::InlineResponse2003, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/person", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_search_tv(&self, first_air_date_year: i32) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/search/tv", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("first_air_date_year", &first_air_date_year.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_trending_media_type_time_window(&self, media_type: &str, time_window: &str) -> Result<::models::InlineResponse20021, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/trending/{media_type}/{time_window}", configuration.base_path, media_type=urlencode(media_type), time_window=urlencode(time_window));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_airing_today(&self, ) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/airing_today", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_changes(&self, ) -> Result<::models::InlineResponse20016, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/changes", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_episode_episode_id_changes(&self, episode_id: i32) -> Result<::models::InlineResponse20060, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/episode/{episode_id}/changes", configuration.base_path, episode_id=episode_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_episode_group_id(&self, id: &str) -> Result<::models::InlineResponse20035, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/episode_group/{id}", configuration.base_path, id=urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_latest(&self, ) -> Result<::models::InlineResponse20077, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/latest", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_on_the_air(&self, ) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/on_the_air", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_popular(&self, ) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/popular", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_season_season_id_changes(&self, season_id: i32) -> Result<::models::InlineResponse20030, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/season/{season_id}/changes", configuration.base_path, season_id=season_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_top_rated(&self, ) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/top_rated", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id(&self, tv_id: i32) -> Result<::models::InlineResponse20037, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_account_states(&self, tv_id: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse2004, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/account_states", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_alternative_titles(&self, tv_id: i32) -> Result<::models::InlineResponse20070, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/alternative_titles", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_changes(&self, tv_id: i32) -> Result<::models::InlineResponse20086, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/changes", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_content_ratings(&self, tv_id: i32) -> Result<::models::InlineResponse20074, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/content_ratings", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_credits(&self, tv_id: i32) -> Result<::models::InlineResponse20011, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/credits", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_episode_groups(&self, tv_id: i32) -> Result<::models::InlineResponse20040, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/episode_groups", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_external_ids(&self, tv_id: i32) -> Result<::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/external_ids", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_images(&self, tv_id: i32) -> Result<::models::InlineResponse20039, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/images", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_keywords(&self, tv_id: i32) -> Result<::models::InlineResponse20046, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/keywords", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_recommendations(&self, tv_id: i32) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/recommendations", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_reviews(&self, tv_id: i32) -> Result<::models::InlineResponse20033, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/reviews", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_screened_theatrically(&self, tv_id: i32) -> Result<::models::InlineResponse2007, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/screened_theatrically", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20083, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_account_states(&self, tv_id: i32, season_number: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse20042, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/account_states", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_credits(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20011, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/credits", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20057, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_account_states(&self, tv_id: i32, season_number: i32, episode_number: i32, guest_session_id: &str, session_id: &str) -> Result<::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/account_states", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_credits(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20020, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_external_ids(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/external_ids", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_images(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20065, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_translations(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20068, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/translations", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_episode_episode_number_videos(&self, tv_id: i32, season_number: i32, episode_number: i32) -> Result<::models::InlineResponse20061, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/videos", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_external_ids(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse2009, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/external_ids", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_images(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20023, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/images", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_season_season_number_videos(&self, tv_id: i32, season_number: i32) -> Result<::models::InlineResponse20061, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/videos", configuration.base_path, tv_id=tv_id, season_number=season_number);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_similar(&self, tv_id: i32) -> Result<::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/similar", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_translations(&self, tv_id: i32) -> Result<::models::InlineResponse20078, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/translations", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn g_et_tv_tv_id_videos(&self, tv_id: i32) -> Result<::models::InlineResponse20027, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/videos", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_account_account_id_favorite(&self, account_id: i32, session_id: &str, content_type: &str, body: ::models::InlineObject2) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/favorite", configuration.base_path, account_id=account_id);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_account_account_id_watchlist(&self, account_id: i32, content_type: &str, session_id: &str, body: ::models::InlineObject8) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/account/{account_id}/watchlist", configuration.base_path, account_id=account_id);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_authentication_session_convert4(&self, body: ::models::InlineObject4) -> Result<::models::InlineResponse20055, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/session/convert/4", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_authentication_session_new(&self, body: ::models::InlineObject6) -> Result<::models::InlineResponse20055, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/session/new", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_authentication_token_validate_with_login(&self, body: ::models::InlineObject10) -> Result<::models::InlineResponse20084, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/authentication/token/validate_with_login", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_list(&self, content_type: &str, session_id: &str, body: ::models::InlineObject5) -> Result<::models::InlineResponse201, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_list_list_id_add_item(&self, list_id: &str, content_type: &str, session_id: &str, body: ::models::InlineObject9) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}/add_item", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_list_list_id_clear(&self, list_id: &str, confirm: bool, session_id: &str) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}/clear", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("confirm", &confirm.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_list_list_id_remove_item(&self, list_id: &str, content_type: &str, session_id: &str, body: ::models::InlineObject7) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/list/{list_id}/remove_item", configuration.base_path, list_id=urlencode(list_id));
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_movie_movie_id_rating(&self, movie_id: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/movie/{movie_id}/rating", configuration.base_path, movie_id=movie_id);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_tv_tv_id_rating(&self, tv_id: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject3) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/rating", configuration.base_path, tv_id=tv_id);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn p_ost_tv_tv_id_season_season_number_episode_episode_number_rating(&self, tv_id: i32, season_number: i32, episode_number: i32, content_type: &str, guest_session_id: &str, session_id: &str, body: ::models::InlineObject1) -> Result<::models::InlineResponse401, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tv/{tv_id}/season/{season_number}/episode/{episode_number}/rating", configuration.base_path, tv_id=tv_id, season_number=season_number, episode_number=episode_number);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("guest_session_id", &guest_session_id.to_string())]);
        req_builder = req_builder.query(&[("session_id", &session_id.to_string())]);
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.query(&[("api_key", val)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("Content-Type", content_type.to_string());
        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
