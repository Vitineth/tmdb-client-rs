/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Credit {
    #[serde(rename = "credit_type", skip_serializing_if = "Option::is_none")]
    pub credit_type: Option<String>,
    #[serde(rename = "department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,
    #[serde(rename = "job", skip_serializing_if = "Option::is_none")]
    pub job: Option<String>,
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<crate::models::CreditMedia>,
    #[serde(rename = "media_type", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "person", skip_serializing_if = "Option::is_none")]
    pub person: Option<crate::models::CreditPerson>,
}

impl Credit {
    pub fn new() -> Credit {
        Credit {
            credit_type: None,
            department: None,
            job: None,
            media: None,
            media_type: None,
            id: None,
            person: None,
        }
    }
}
