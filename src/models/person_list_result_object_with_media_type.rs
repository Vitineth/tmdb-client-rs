/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct PersonListResultObjectWithMediaType {
    #[serde(rename = "profile_path", skip_serializing_if = "Option::is_none")]
    pub profile_path: Option<Value>,
    #[serde(rename = "adult", skip_serializing_if = "Option::is_none")]
    pub adult: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "media_type")]
    pub media_type: String,
    #[serde(rename = "known_for", skip_serializing_if = "Option::is_none")]
    pub known_for: Option<Vec<Value>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "popularity", skip_serializing_if = "Option::is_none")]
    pub popularity: Option<f32>,
}

impl PersonListResultObjectWithMediaType {
    pub fn new(media_type: String) -> PersonListResultObjectWithMediaType {
        PersonListResultObjectWithMediaType {
            profile_path: None,
            adult: None,
            id: None,
            media_type: media_type,
            known_for: None,
            name: None,
            popularity: None,
        }
    }
}

/// 
#[derive(Debug, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "person")]
    Person,
}

