/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct EpisodeDetails {
    #[serde(rename = "air_date", skip_serializing_if = "Option::is_none")]
    pub air_date: Option<String>,
    #[serde(rename = "crew", skip_serializing_if = "Option::is_none")]
    pub crew: Option<Vec<crate::models::Crew>>,
    #[serde(rename = "episode_number", skip_serializing_if = "Option::is_none")]
    pub episode_number: Option<i32>,
    #[serde(rename = "guest_stars", skip_serializing_if = "Option::is_none")]
    pub guest_stars: Option<Vec<crate::models::GuestStar>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "overview", skip_serializing_if = "Option::is_none")]
    pub overview: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "production_code", skip_serializing_if = "Option::is_none")]
    pub production_code: Option<String>,
    #[serde(rename = "season_number", skip_serializing_if = "Option::is_none")]
    pub season_number: Option<i32>,
    #[serde(rename = "still_path", skip_serializing_if = "Option::is_none")]
    pub still_path: Option<String>,
    #[serde(rename = "vote_average", skip_serializing_if = "Option::is_none")]
    pub vote_average: Option<f32>,
    #[serde(rename = "vote_count", skip_serializing_if = "Option::is_none")]
    pub vote_count: Option<i32>,
    // "append-to" options
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<crate::models::ChangeDetails>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<crate::models::Credits>,
    #[serde(rename = "external_ids", skip_serializing_if = "Option::is_none")]
    pub external_ids: Option<crate::models::ExternalIds>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<crate::models::Images>,
    #[serde(rename = "translations", skip_serializing_if = "Option::is_none")]
    pub translations: Option<crate::models::TranslationsList>,
    #[serde(rename = "videos", skip_serializing_if = "Option::is_none")]
    pub videos: Option<crate::models::VideosList>,
}

impl EpisodeDetails {
    pub fn new() -> EpisodeDetails {
        EpisodeDetails {
            air_date: None,
            crew: None,
            episode_number: None,
            guest_stars: None,
            name: None,
            overview: None,
            id: None,
            production_code: None,
            season_number: None,
            still_path: None,
            vote_average: None,
            vote_count: None,
            changes: None,
            credits: None,
            external_ids: None,
            images: None,
            translations: None,
            videos: None,
        }
    }
}
